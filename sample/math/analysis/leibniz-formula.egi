--
-- This file has been auto-generated by egison-translator.
--

def f $x := x

def multSd $x $f $G :=
  let F := Sd x f
   in F * G - Sd x (f * d/d G x)

multSd x (cos x) (f x)

multSd x (cos (2 * x)) (f x)

multSd x (cos (n * x)) (f x)

multSd x (sin x) (f x)

multSd x (sin (2 * x)) (f x)

multSd x (sin (n * x)) (f x)

def as :=
  map
    (\$n ->
      let F := multSd x (cos (n * x)) (f x)
       in (substitute [(x, π)] F - substitute [(x, - π)] F) / π)
    nats

take 10 as

def bs :=
  map
    (\$n ->
      let F := multSd x (sin (n * x)) (f x)
       in (substitute [(x, π)] F - substitute [(x, - π)] F) / π)
    (take 10 nats)

take 10 bs

def f' := map (\$k $b -> b * sin (k * x)) (zip nats bs)

take 10 f'

take 10 (map 1#(substitute [(x, π / 2)] %1) f')

map 1#(%1 / 2) (take 10 (map 1#(substitute [(x, π / 2)] %1) f'))
